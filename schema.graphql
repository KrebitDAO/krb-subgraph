type Account @entity {
  id: Bytes!
  asERC20: ERC20Contract
  ERC20balances: [ERC20Balance!]! @derivedFrom(field: "account")
  ERC20approvalsOwner: [ERC20Approval!]! @derivedFrom(field: "owner")
  ERC20approvalsSpender: [ERC20Approval!]! @derivedFrom(field: "spender")
  ERC20transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "from")
  ERC20transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "to")
  events: [Event!]! @derivedFrom(field: "emitter")
  VerifiableCredentials: [VerifiableCredential!]! @derivedFrom(field: "account")
}
type ERC20Contract @entity(immutable: true) {
  id: Bytes!
  asAccount: Account!
  name: String
  symbol: String
  decimals: Int!
  totalSupply: ERC20Balance!
  balances: [ERC20Balance!]! @derivedFrom(field: "contract")
  approvals: [ERC20Approval!]! @derivedFrom(field: "contract")
  transfers: [ERC20Transfer!]! @derivedFrom(field: "contract")
}
type ERC20Balance @entity {
  id: ID!
  contract: ERC20Contract!
  account: Account
  value: BigDecimal!
  valueExact: BigInt!
  transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "fromBalance")
  transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "toBalance")
}
type ERC20Approval @entity {
  id: ID!
  contract: ERC20Contract!
  owner: Account!
  spender: Account!
  value: BigDecimal!
  valueExact: BigInt!
}
type ERC20Transfer implements Event @entity(immutable: true) {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  contract: ERC20Contract!
  from: Account
  fromBalance: ERC20Balance
  to: Account
  toBalance: ERC20Balance
  value: BigDecimal!
  valueExact: BigInt!
}
interface Event {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
}
type Transaction @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
}

type Issuer @entity {
  id: ID!
  ethereumAddress: Bytes! # address
}

type CredentialSubject @entity {
  id: ID!
  ethereumAddress: Bytes! # address
  _type: String
  typeSchema: String
  value: String
  encrypted: String
  trust: Int!
  stake: BigInt!
  price: BigInt!
  nbf: BigInt!
  exp: BigInt!
}

type CredentialSchema @entity {
  id: ID!
  _type: String
}

type VerifiableCredential @entity {
  id: ID!
  claimId: String
  _context: String
  _type: String
  credentialSubjectDID: String
  credentialSubjectAddress: Bytes!
  issuer: Issuer!
  credentialSubject: CredentialSubject!
  credentialSchema: CredentialSchema!
  issuanceDate: String
  expirationDate: String
  credentialStatus: String
  transaction: String
  reason: String
  disputedBy: String
  account: Account!
}

type CredentialRegistry @entity {
  id: ID!
  dayUpdated: String
  balance: BigInt!
  staked: BigInt!
  issued: BigInt!
  revoked: BigInt!
  deleted: BigInt!
  suspended: BigInt!
  disputed: BigInt!
  expired: BigInt!
}
