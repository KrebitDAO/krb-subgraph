// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuthorizationUsed extends ethereum.Event {
  get params(): AuthorizationUsed__Params {
    return new AuthorizationUsed__Params(this);
  }
}

export class AuthorizationUsed__Params {
  _event: AuthorizationUsed;

  constructor(event: AuthorizationUsed) {
    this._event = event;
  }

  get authorizer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Deleted extends ethereum.Event {
  get params(): Deleted__Params {
    return new Deleted__Params(this);
  }
}

export class Deleted__Params {
  _event: Deleted;

  constructor(event: Deleted) {
    this._event = event;
  }

  get uuid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get reason(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Disputed extends ethereum.Event {
  get params(): Disputed__Params {
    return new Disputed__Params(this);
  }
}

export class Disputed__Params {
  _event: Disputed;

  constructor(event: Disputed) {
    this._event = event;
  }

  get uuid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get disputedBy(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Expired extends ethereum.Event {
  get params(): Expired__Params {
    return new Expired__Params(this);
  }
}

export class Expired__Params {
  _event: Expired;

  constructor(event: Expired) {
    this._event = event;
  }

  get uuid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class Issued extends ethereum.Event {
  get params(): Issued__Params {
    return new Issued__Params(this);
  }
}

export class Issued__Params {
  _event: Issued;

  constructor(event: Issued) {
    this._event = event;
  }

  get uuid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get vc(): IssuedVcStruct {
    return this._event.parameters[1].value.toTuple() as IssuedVcStruct;
  }
}

export class IssuedVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): IssuedVcIssuerStruct {
    return this[2].toTuple() as IssuedVcIssuerStruct;
  }

  get credentialSubject(): IssuedVcCredentialSubjectStruct {
    return this[3].toTuple() as IssuedVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class IssuedVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class IssuedVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Revoked extends ethereum.Event {
  get params(): Revoked__Params {
    return new Revoked__Params(this);
  }
}

export class Revoked__Params {
  _event: Revoked;

  constructor(event: Revoked) {
    this._event = event;
  }

  get uuid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get reason(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Suspended extends ethereum.Event {
  get params(): Suspended__Params {
    return new Suspended__Params(this);
  }
}

export class Suspended__Params {
  _event: Suspended;

  constructor(event: Suspended) {
    this._event = event;
  }

  get uuid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get reason(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class KRBTokenV01__deleteVCInputVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): KRBTokenV01__deleteVCInputVcIssuerStruct {
    return this[2].toTuple() as KRBTokenV01__deleteVCInputVcIssuerStruct;
  }

  get credentialSubject(): KRBTokenV01__deleteVCInputVcCredentialSubjectStruct {
    return this[3].toTuple() as KRBTokenV01__deleteVCInputVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class KRBTokenV01__deleteVCInputVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__deleteVCInputVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__deleteVCWithAuthorizationInputVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): KRBTokenV01__deleteVCWithAuthorizationInputVcIssuerStruct {
    return this[2].toTuple() as KRBTokenV01__deleteVCWithAuthorizationInputVcIssuerStruct;
  }

  get credentialSubject(): KRBTokenV01__deleteVCWithAuthorizationInputVcCredentialSubjectStruct {
    return this[3].toTuple() as KRBTokenV01__deleteVCWithAuthorizationInputVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class KRBTokenV01__deleteVCWithAuthorizationInputVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__deleteVCWithAuthorizationInputVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__deleteVCWithAuthorizationInputSubjectProofStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class KRBTokenV01__expiredVCInputVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): KRBTokenV01__expiredVCInputVcIssuerStruct {
    return this[2].toTuple() as KRBTokenV01__expiredVCInputVcIssuerStruct;
  }

  get credentialSubject(): KRBTokenV01__expiredVCInputVcCredentialSubjectStruct {
    return this[3].toTuple() as KRBTokenV01__expiredVCInputVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class KRBTokenV01__expiredVCInputVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__expiredVCInputVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__registerVCInputVpStruct extends ethereum.Tuple {
  get vc(): KRBTokenV01__registerVCInputVpVcStruct {
    return this[0].toTuple() as KRBTokenV01__registerVCInputVpVcStruct;
  }

  get proof(): KRBTokenV01__registerVCInputVpProofStruct {
    return this[1].toTuple() as KRBTokenV01__registerVCInputVpProofStruct;
  }
}

export class KRBTokenV01__registerVCInputVpVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): KRBTokenV01__registerVCInputVpVcIssuerStruct {
    return this[2].toTuple() as KRBTokenV01__registerVCInputVpVcIssuerStruct;
  }

  get credentialSubject(): KRBTokenV01__registerVCInputVpVcCredentialSubjectStruct {
    return this[3].toTuple() as KRBTokenV01__registerVCInputVpVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class KRBTokenV01__registerVCInputVpVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__registerVCInputVpVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__registerVCInputVpProofStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class KRBTokenV01__registerVCWithAuthorizationInputVpStruct extends ethereum.Tuple {
  get vc(): KRBTokenV01__registerVCWithAuthorizationInputVpVcStruct {
    return this[0].toTuple() as KRBTokenV01__registerVCWithAuthorizationInputVpVcStruct;
  }

  get proof(): KRBTokenV01__registerVCWithAuthorizationInputVpProofStruct {
    return this[1].toTuple() as KRBTokenV01__registerVCWithAuthorizationInputVpProofStruct;
  }
}

export class KRBTokenV01__registerVCWithAuthorizationInputVpVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): KRBTokenV01__registerVCWithAuthorizationInputVpVcIssuerStruct {
    return this[2].toTuple() as KRBTokenV01__registerVCWithAuthorizationInputVpVcIssuerStruct;
  }

  get credentialSubject(): KRBTokenV01__registerVCWithAuthorizationInputVpVcCredentialSubjectStruct {
    return this[3].toTuple() as KRBTokenV01__registerVCWithAuthorizationInputVpVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class KRBTokenV01__registerVCWithAuthorizationInputVpVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__registerVCWithAuthorizationInputVpVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__registerVCWithAuthorizationInputVpProofStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class KRBTokenV01__registerVCWithAuthorizationInputSubjectProofStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class KRBTokenV01__revokeVCInputVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): KRBTokenV01__revokeVCInputVcIssuerStruct {
    return this[2].toTuple() as KRBTokenV01__revokeVCInputVcIssuerStruct;
  }

  get credentialSubject(): KRBTokenV01__revokeVCInputVcCredentialSubjectStruct {
    return this[3].toTuple() as KRBTokenV01__revokeVCInputVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class KRBTokenV01__revokeVCInputVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__revokeVCInputVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__revokeVCWithAuthorizationInputVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): KRBTokenV01__revokeVCWithAuthorizationInputVcIssuerStruct {
    return this[2].toTuple() as KRBTokenV01__revokeVCWithAuthorizationInputVcIssuerStruct;
  }

  get credentialSubject(): KRBTokenV01__revokeVCWithAuthorizationInputVcCredentialSubjectStruct {
    return this[3].toTuple() as KRBTokenV01__revokeVCWithAuthorizationInputVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class KRBTokenV01__revokeVCWithAuthorizationInputVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__revokeVCWithAuthorizationInputVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__revokeVCWithAuthorizationInputIssuerProofStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class KRBTokenV01__suspendVCInputVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): KRBTokenV01__suspendVCInputVcIssuerStruct {
    return this[2].toTuple() as KRBTokenV01__suspendVCInputVcIssuerStruct;
  }

  get credentialSubject(): KRBTokenV01__suspendVCInputVcCredentialSubjectStruct {
    return this[3].toTuple() as KRBTokenV01__suspendVCInputVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class KRBTokenV01__suspendVCInputVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__suspendVCInputVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__suspendVCWithAuthorizationInputVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): KRBTokenV01__suspendVCWithAuthorizationInputVcIssuerStruct {
    return this[2].toTuple() as KRBTokenV01__suspendVCWithAuthorizationInputVcIssuerStruct;
  }

  get credentialSubject(): KRBTokenV01__suspendVCWithAuthorizationInputVcCredentialSubjectStruct {
    return this[3].toTuple() as KRBTokenV01__suspendVCWithAuthorizationInputVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class KRBTokenV01__suspendVCWithAuthorizationInputVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__suspendVCWithAuthorizationInputVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__suspendVCWithAuthorizationInputIssuerProofStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class KRBTokenV01__getUuidInputVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): KRBTokenV01__getUuidInputVcIssuerStruct {
    return this[2].toTuple() as KRBTokenV01__getUuidInputVcIssuerStruct;
  }

  get credentialSubject(): KRBTokenV01__getUuidInputVcCredentialSubjectStruct {
    return this[3].toTuple() as KRBTokenV01__getUuidInputVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class KRBTokenV01__getUuidInputVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__getUuidInputVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class KRBTokenV01__registryResult {
  value0: i32;
  value1: Bytes;

  constructor(value0: i32, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }
}

export class KRBTokenV01 extends ethereum.SmartContract {
  static bind(address: Address): KRBTokenV01 {
    return new KRBTokenV01("KRBTokenV01", address);
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deleteVC(vc: KRBTokenV01__deleteVCInputVcStruct, reason: string): boolean {
    let result = super.call(
      "deleteVC",
      "deleteVC((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),string):(bool)",
      [ethereum.Value.fromTuple(vc), ethereum.Value.fromString(reason)]
    );

    return result[0].toBoolean();
  }

  try_deleteVC(
    vc: KRBTokenV01__deleteVCInputVcStruct,
    reason: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "deleteVC",
      "deleteVC((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),string):(bool)",
      [ethereum.Value.fromTuple(vc), ethereum.Value.fromString(reason)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deleteVCWithAuthorization(
    vc: KRBTokenV01__deleteVCWithAuthorizationInputVcStruct,
    subjectProof: KRBTokenV01__deleteVCWithAuthorizationInputSubjectProofStruct,
    reason: string
  ): boolean {
    let result = super.call(
      "deleteVCWithAuthorization",
      "deleteVCWithAuthorization((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),(uint8,bytes32,bytes32),string):(bool)",
      [
        ethereum.Value.fromTuple(vc),
        ethereum.Value.fromTuple(subjectProof),
        ethereum.Value.fromString(reason),
      ]
    );

    return result[0].toBoolean();
  }

  try_deleteVCWithAuthorization(
    vc: KRBTokenV01__deleteVCWithAuthorizationInputVcStruct,
    subjectProof: KRBTokenV01__deleteVCWithAuthorizationInputSubjectProofStruct,
    reason: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "deleteVCWithAuthorization",
      "deleteVCWithAuthorization((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),(uint8,bytes32,bytes32),string):(bool)",
      [
        ethereum.Value.fromTuple(vc),
        ethereum.Value.fromTuple(subjectProof),
        ethereum.Value.fromString(reason),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  expiredVC(uuid: Bytes, vc: KRBTokenV01__expiredVCInputVcStruct): boolean {
    let result = super.call(
      "expiredVC",
      "expiredVC(bytes32,(string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8)):(bool)",
      [ethereum.Value.fromFixedBytes(uuid), ethereum.Value.fromTuple(vc)]
    );

    return result[0].toBoolean();
  }

  try_expiredVC(
    uuid: Bytes,
    vc: KRBTokenV01__expiredVCInputVcStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "expiredVC",
      "expiredVC(bytes32,(string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8)):(bool)",
      [ethereum.Value.fromFixedBytes(uuid), ethereum.Value.fromTuple(vc)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  registerVC(vp: KRBTokenV01__registerVCInputVpStruct): boolean {
    let result = super.call(
      "registerVC",
      "registerVC(((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),(uint8,bytes32,bytes32))):(bool)",
      [ethereum.Value.fromTuple(vp)]
    );

    return result[0].toBoolean();
  }

  try_registerVC(
    vp: KRBTokenV01__registerVCInputVpStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "registerVC",
      "registerVC(((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),(uint8,bytes32,bytes32))):(bool)",
      [ethereum.Value.fromTuple(vp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  registerVCWithAuthorization(
    vp: KRBTokenV01__registerVCWithAuthorizationInputVpStruct,
    subjectProof: KRBTokenV01__registerVCWithAuthorizationInputSubjectProofStruct
  ): boolean {
    let result = super.call(
      "registerVCWithAuthorization",
      "registerVCWithAuthorization(((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),(uint8,bytes32,bytes32)),(uint8,bytes32,bytes32)):(bool)",
      [ethereum.Value.fromTuple(vp), ethereum.Value.fromTuple(subjectProof)]
    );

    return result[0].toBoolean();
  }

  try_registerVCWithAuthorization(
    vp: KRBTokenV01__registerVCWithAuthorizationInputVpStruct,
    subjectProof: KRBTokenV01__registerVCWithAuthorizationInputSubjectProofStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "registerVCWithAuthorization",
      "registerVCWithAuthorization(((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),(uint8,bytes32,bytes32)),(uint8,bytes32,bytes32)):(bool)",
      [ethereum.Value.fromTuple(vp), ethereum.Value.fromTuple(subjectProof)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  revokeVC(vc: KRBTokenV01__revokeVCInputVcStruct, reason: string): boolean {
    let result = super.call(
      "revokeVC",
      "revokeVC((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),string):(bool)",
      [ethereum.Value.fromTuple(vc), ethereum.Value.fromString(reason)]
    );

    return result[0].toBoolean();
  }

  try_revokeVC(
    vc: KRBTokenV01__revokeVCInputVcStruct,
    reason: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "revokeVC",
      "revokeVC((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),string):(bool)",
      [ethereum.Value.fromTuple(vc), ethereum.Value.fromString(reason)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  revokeVCWithAuthorization(
    vc: KRBTokenV01__revokeVCWithAuthorizationInputVcStruct,
    issuerProof: KRBTokenV01__revokeVCWithAuthorizationInputIssuerProofStruct,
    reason: string
  ): boolean {
    let result = super.call(
      "revokeVCWithAuthorization",
      "revokeVCWithAuthorization((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),(uint8,bytes32,bytes32),string):(bool)",
      [
        ethereum.Value.fromTuple(vc),
        ethereum.Value.fromTuple(issuerProof),
        ethereum.Value.fromString(reason),
      ]
    );

    return result[0].toBoolean();
  }

  try_revokeVCWithAuthorization(
    vc: KRBTokenV01__revokeVCWithAuthorizationInputVcStruct,
    issuerProof: KRBTokenV01__revokeVCWithAuthorizationInputIssuerProofStruct,
    reason: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "revokeVCWithAuthorization",
      "revokeVCWithAuthorization((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),(uint8,bytes32,bytes32),string):(bool)",
      [
        ethereum.Value.fromTuple(vc),
        ethereum.Value.fromTuple(issuerProof),
        ethereum.Value.fromString(reason),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  suspendVC(vc: KRBTokenV01__suspendVCInputVcStruct, reason: string): boolean {
    let result = super.call(
      "suspendVC",
      "suspendVC((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),string):(bool)",
      [ethereum.Value.fromTuple(vc), ethereum.Value.fromString(reason)]
    );

    return result[0].toBoolean();
  }

  try_suspendVC(
    vc: KRBTokenV01__suspendVCInputVcStruct,
    reason: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "suspendVC",
      "suspendVC((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),string):(bool)",
      [ethereum.Value.fromTuple(vc), ethereum.Value.fromString(reason)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  suspendVCWithAuthorization(
    vc: KRBTokenV01__suspendVCWithAuthorizationInputVcStruct,
    issuerProof: KRBTokenV01__suspendVCWithAuthorizationInputIssuerProofStruct,
    reason: string
  ): boolean {
    let result = super.call(
      "suspendVCWithAuthorization",
      "suspendVCWithAuthorization((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),(uint8,bytes32,bytes32),string):(bool)",
      [
        ethereum.Value.fromTuple(vc),
        ethereum.Value.fromTuple(issuerProof),
        ethereum.Value.fromString(reason),
      ]
    );

    return result[0].toBoolean();
  }

  try_suspendVCWithAuthorization(
    vc: KRBTokenV01__suspendVCWithAuthorizationInputVcStruct,
    issuerProof: KRBTokenV01__suspendVCWithAuthorizationInputIssuerProofStruct,
    reason: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "suspendVCWithAuthorization",
      "suspendVCWithAuthorization((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8),(uint8,bytes32,bytes32),string):(bool)",
      [
        ethereum.Value.fromTuple(vc),
        ethereum.Value.fromTuple(issuerProof),
        ethereum.Value.fromString(reason),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  authorizationState(param0: Address, param1: Bytes): boolean {
    let result = super.call(
      "authorizationState",
      "authorizationState(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1),
      ]
    );

    return result[0].toBoolean();
  }

  try_authorizationState(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "authorizationState",
      "authorizationState(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getDomainSeparator(): Bytes {
    let result = super.call(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getDomainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index),
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUuid(vc: KRBTokenV01__getUuidInputVcStruct): Bytes {
    let result = super.call(
      "getUuid",
      "getUuid((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8)):(bytes32)",
      [ethereum.Value.fromTuple(vc)]
    );

    return result[0].toBytes();
  }

  try_getUuid(
    vc: KRBTokenV01__getUuidInputVcStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getUuid",
      "getUuid((string,string,(string,address),(string,address),string,string,uint256,uint256,uint8,uint256,uint8)):(bytes32)",
      [ethereum.Value.fromTuple(vc)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  GOVERN_ROLE(): Bytes {
    let result = super.call("GOVERN_ROLE", "GOVERN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_GOVERN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("GOVERN_ROLE", "GOVERN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxStakeToIssue(): BigInt {
    let result = super.call(
      "maxStakeToIssue",
      "maxStakeToIssue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxStakeToIssue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxStakeToIssue",
      "maxStakeToIssue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minBalanceToIssue(): BigInt {
    let result = super.call(
      "minBalanceToIssue",
      "minBalanceToIssue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minBalanceToIssue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minBalanceToIssue",
      "minBalanceToIssue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minBalanceToReceive(): BigInt {
    let result = super.call(
      "minBalanceToReceive",
      "minBalanceToReceive():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minBalanceToReceive(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minBalanceToReceive",
      "minBalanceToReceive():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minBalanceToTransfer(): BigInt {
    let result = super.call(
      "minBalanceToTransfer",
      "minBalanceToTransfer():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minBalanceToTransfer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minBalanceToTransfer",
      "minBalanceToTransfer():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minStakeToIssue(): BigInt {
    let result = super.call(
      "minStakeToIssue",
      "minStakeToIssue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minStakeToIssue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minStakeToIssue",
      "minStakeToIssue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINTER_ROLE(): Bytes {
    let result = super.call("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  PAUSER_ROLE(): Bytes {
    let result = super.call("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  registry(param0: Bytes): KRBTokenV01__registryResult {
    let result = super.call("registry", "registry(bytes32):(uint8,bytes32)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return new KRBTokenV01__registryResult(
      result[0].toI32(),
      result[1].toBytes()
    );
  }

  try_registry(
    param0: Bytes
  ): ethereum.CallResult<KRBTokenV01__registryResult> {
    let result = super.tryCall(
      "registry",
      "registry(bytes32):(uint8,bytes32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KRBTokenV01__registryResult(value[0].toI32(), value[1].toBytes())
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TRANSFER_WITH_AUTHORIZATION_TYPEHASH(): Bytes {
    let result = super.call(
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_TRANSFER_WITH_AUTHORIZATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnFromCall extends ethereum.Call {
  get inputs(): BurnFromCall__Inputs {
    return new BurnFromCall__Inputs(this);
  }

  get outputs(): BurnFromCall__Outputs {
    return new BurnFromCall__Outputs(this);
  }
}

export class BurnFromCall__Inputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnFromCall__Outputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DeleteVCCall extends ethereum.Call {
  get inputs(): DeleteVCCall__Inputs {
    return new DeleteVCCall__Inputs(this);
  }

  get outputs(): DeleteVCCall__Outputs {
    return new DeleteVCCall__Outputs(this);
  }
}

export class DeleteVCCall__Inputs {
  _call: DeleteVCCall;

  constructor(call: DeleteVCCall) {
    this._call = call;
  }

  get vc(): DeleteVCCallVcStruct {
    return this._call.inputValues[0].value.toTuple() as DeleteVCCallVcStruct;
  }

  get reason(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class DeleteVCCall__Outputs {
  _call: DeleteVCCall;

  constructor(call: DeleteVCCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DeleteVCCallVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): DeleteVCCallVcIssuerStruct {
    return this[2].toTuple() as DeleteVCCallVcIssuerStruct;
  }

  get credentialSubject(): DeleteVCCallVcCredentialSubjectStruct {
    return this[3].toTuple() as DeleteVCCallVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class DeleteVCCallVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class DeleteVCCallVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class DeleteVCWithAuthorizationCall extends ethereum.Call {
  get inputs(): DeleteVCWithAuthorizationCall__Inputs {
    return new DeleteVCWithAuthorizationCall__Inputs(this);
  }

  get outputs(): DeleteVCWithAuthorizationCall__Outputs {
    return new DeleteVCWithAuthorizationCall__Outputs(this);
  }
}

export class DeleteVCWithAuthorizationCall__Inputs {
  _call: DeleteVCWithAuthorizationCall;

  constructor(call: DeleteVCWithAuthorizationCall) {
    this._call = call;
  }

  get vc(): DeleteVCWithAuthorizationCallVcStruct {
    return this._call.inputValues[0].value.toTuple() as DeleteVCWithAuthorizationCallVcStruct;
  }

  get subjectProof(): DeleteVCWithAuthorizationCallSubjectProofStruct {
    return this._call.inputValues[1].value.toTuple() as DeleteVCWithAuthorizationCallSubjectProofStruct;
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class DeleteVCWithAuthorizationCall__Outputs {
  _call: DeleteVCWithAuthorizationCall;

  constructor(call: DeleteVCWithAuthorizationCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DeleteVCWithAuthorizationCallVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): DeleteVCWithAuthorizationCallVcIssuerStruct {
    return this[2].toTuple() as DeleteVCWithAuthorizationCallVcIssuerStruct;
  }

  get credentialSubject(): DeleteVCWithAuthorizationCallVcCredentialSubjectStruct {
    return this[3].toTuple() as DeleteVCWithAuthorizationCallVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class DeleteVCWithAuthorizationCallVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class DeleteVCWithAuthorizationCallVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class DeleteVCWithAuthorizationCallSubjectProofStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class DisputeVCByGovernCall extends ethereum.Call {
  get inputs(): DisputeVCByGovernCall__Inputs {
    return new DisputeVCByGovernCall__Inputs(this);
  }

  get outputs(): DisputeVCByGovernCall__Outputs {
    return new DisputeVCByGovernCall__Outputs(this);
  }
}

export class DisputeVCByGovernCall__Inputs {
  _call: DisputeVCByGovernCall;

  constructor(call: DisputeVCByGovernCall) {
    this._call = call;
  }

  get vc(): DisputeVCByGovernCallVcStruct {
    return this._call.inputValues[0].value.toTuple() as DisputeVCByGovernCallVcStruct;
  }

  get disputeVC(): DisputeVCByGovernCallDisputeVCStruct {
    return this._call.inputValues[1].value.toTuple() as DisputeVCByGovernCallDisputeVCStruct;
  }
}

export class DisputeVCByGovernCall__Outputs {
  _call: DisputeVCByGovernCall;

  constructor(call: DisputeVCByGovernCall) {
    this._call = call;
  }
}

export class DisputeVCByGovernCallVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): DisputeVCByGovernCallVcIssuerStruct {
    return this[2].toTuple() as DisputeVCByGovernCallVcIssuerStruct;
  }

  get credentialSubject(): DisputeVCByGovernCallVcCredentialSubjectStruct {
    return this[3].toTuple() as DisputeVCByGovernCallVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class DisputeVCByGovernCallVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class DisputeVCByGovernCallVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class DisputeVCByGovernCallDisputeVCStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): DisputeVCByGovernCallDisputeVCIssuerStruct {
    return this[2].toTuple() as DisputeVCByGovernCallDisputeVCIssuerStruct;
  }

  get credentialSubject(): DisputeVCByGovernCallDisputeVCCredentialSubjectStruct {
    return this[3].toTuple() as DisputeVCByGovernCallDisputeVCCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class DisputeVCByGovernCallDisputeVCIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class DisputeVCByGovernCallDisputeVCCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class ExpiredVCCall extends ethereum.Call {
  get inputs(): ExpiredVCCall__Inputs {
    return new ExpiredVCCall__Inputs(this);
  }

  get outputs(): ExpiredVCCall__Outputs {
    return new ExpiredVCCall__Outputs(this);
  }
}

export class ExpiredVCCall__Inputs {
  _call: ExpiredVCCall;

  constructor(call: ExpiredVCCall) {
    this._call = call;
  }

  get uuid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get vc(): ExpiredVCCallVcStruct {
    return this._call.inputValues[1].value.toTuple() as ExpiredVCCallVcStruct;
  }
}

export class ExpiredVCCall__Outputs {
  _call: ExpiredVCCall;

  constructor(call: ExpiredVCCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExpiredVCCallVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): ExpiredVCCallVcIssuerStruct {
    return this[2].toTuple() as ExpiredVCCallVcIssuerStruct;
  }

  get credentialSubject(): ExpiredVCCallVcCredentialSubjectStruct {
    return this[3].toTuple() as ExpiredVCCallVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class ExpiredVCCallVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class ExpiredVCCallVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RegisterVCCall extends ethereum.Call {
  get inputs(): RegisterVCCall__Inputs {
    return new RegisterVCCall__Inputs(this);
  }

  get outputs(): RegisterVCCall__Outputs {
    return new RegisterVCCall__Outputs(this);
  }
}

export class RegisterVCCall__Inputs {
  _call: RegisterVCCall;

  constructor(call: RegisterVCCall) {
    this._call = call;
  }

  get vp(): RegisterVCCallVpStruct {
    return this._call.inputValues[0].value.toTuple() as RegisterVCCallVpStruct;
  }
}

export class RegisterVCCall__Outputs {
  _call: RegisterVCCall;

  constructor(call: RegisterVCCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RegisterVCCallVpStruct extends ethereum.Tuple {
  get vc(): RegisterVCCallVpVcStruct {
    return this[0].toTuple() as RegisterVCCallVpVcStruct;
  }

  get proof(): RegisterVCCallVpProofStruct {
    return this[1].toTuple() as RegisterVCCallVpProofStruct;
  }
}

export class RegisterVCCallVpVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): RegisterVCCallVpVcIssuerStruct {
    return this[2].toTuple() as RegisterVCCallVpVcIssuerStruct;
  }

  get credentialSubject(): RegisterVCCallVpVcCredentialSubjectStruct {
    return this[3].toTuple() as RegisterVCCallVpVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class RegisterVCCallVpVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class RegisterVCCallVpVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class RegisterVCCallVpProofStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class RegisterVCWithAuthorizationCall extends ethereum.Call {
  get inputs(): RegisterVCWithAuthorizationCall__Inputs {
    return new RegisterVCWithAuthorizationCall__Inputs(this);
  }

  get outputs(): RegisterVCWithAuthorizationCall__Outputs {
    return new RegisterVCWithAuthorizationCall__Outputs(this);
  }
}

export class RegisterVCWithAuthorizationCall__Inputs {
  _call: RegisterVCWithAuthorizationCall;

  constructor(call: RegisterVCWithAuthorizationCall) {
    this._call = call;
  }

  get vp(): RegisterVCWithAuthorizationCallVpStruct {
    return this._call.inputValues[0].value.toTuple() as RegisterVCWithAuthorizationCallVpStruct;
  }

  get subjectProof(): RegisterVCWithAuthorizationCallSubjectProofStruct {
    return this._call.inputValues[1].value.toTuple() as RegisterVCWithAuthorizationCallSubjectProofStruct;
  }
}

export class RegisterVCWithAuthorizationCall__Outputs {
  _call: RegisterVCWithAuthorizationCall;

  constructor(call: RegisterVCWithAuthorizationCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RegisterVCWithAuthorizationCallVpStruct extends ethereum.Tuple {
  get vc(): RegisterVCWithAuthorizationCallVpVcStruct {
    return this[0].toTuple() as RegisterVCWithAuthorizationCallVpVcStruct;
  }

  get proof(): RegisterVCWithAuthorizationCallVpProofStruct {
    return this[1].toTuple() as RegisterVCWithAuthorizationCallVpProofStruct;
  }
}

export class RegisterVCWithAuthorizationCallVpVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): RegisterVCWithAuthorizationCallVpVcIssuerStruct {
    return this[2].toTuple() as RegisterVCWithAuthorizationCallVpVcIssuerStruct;
  }

  get credentialSubject(): RegisterVCWithAuthorizationCallVpVcCredentialSubjectStruct {
    return this[3].toTuple() as RegisterVCWithAuthorizationCallVpVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class RegisterVCWithAuthorizationCallVpVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class RegisterVCWithAuthorizationCallVpVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class RegisterVCWithAuthorizationCallVpProofStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class RegisterVCWithAuthorizationCallSubjectProofStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class RevokeVCCall extends ethereum.Call {
  get inputs(): RevokeVCCall__Inputs {
    return new RevokeVCCall__Inputs(this);
  }

  get outputs(): RevokeVCCall__Outputs {
    return new RevokeVCCall__Outputs(this);
  }
}

export class RevokeVCCall__Inputs {
  _call: RevokeVCCall;

  constructor(call: RevokeVCCall) {
    this._call = call;
  }

  get vc(): RevokeVCCallVcStruct {
    return this._call.inputValues[0].value.toTuple() as RevokeVCCallVcStruct;
  }

  get reason(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RevokeVCCall__Outputs {
  _call: RevokeVCCall;

  constructor(call: RevokeVCCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RevokeVCCallVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): RevokeVCCallVcIssuerStruct {
    return this[2].toTuple() as RevokeVCCallVcIssuerStruct;
  }

  get credentialSubject(): RevokeVCCallVcCredentialSubjectStruct {
    return this[3].toTuple() as RevokeVCCallVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class RevokeVCCallVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class RevokeVCCallVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class RevokeVCWithAuthorizationCall extends ethereum.Call {
  get inputs(): RevokeVCWithAuthorizationCall__Inputs {
    return new RevokeVCWithAuthorizationCall__Inputs(this);
  }

  get outputs(): RevokeVCWithAuthorizationCall__Outputs {
    return new RevokeVCWithAuthorizationCall__Outputs(this);
  }
}

export class RevokeVCWithAuthorizationCall__Inputs {
  _call: RevokeVCWithAuthorizationCall;

  constructor(call: RevokeVCWithAuthorizationCall) {
    this._call = call;
  }

  get vc(): RevokeVCWithAuthorizationCallVcStruct {
    return this._call.inputValues[0].value.toTuple() as RevokeVCWithAuthorizationCallVcStruct;
  }

  get issuerProof(): RevokeVCWithAuthorizationCallIssuerProofStruct {
    return this._call.inputValues[1].value.toTuple() as RevokeVCWithAuthorizationCallIssuerProofStruct;
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class RevokeVCWithAuthorizationCall__Outputs {
  _call: RevokeVCWithAuthorizationCall;

  constructor(call: RevokeVCWithAuthorizationCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RevokeVCWithAuthorizationCallVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): RevokeVCWithAuthorizationCallVcIssuerStruct {
    return this[2].toTuple() as RevokeVCWithAuthorizationCallVcIssuerStruct;
  }

  get credentialSubject(): RevokeVCWithAuthorizationCallVcCredentialSubjectStruct {
    return this[3].toTuple() as RevokeVCWithAuthorizationCallVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class RevokeVCWithAuthorizationCallVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class RevokeVCWithAuthorizationCallVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class RevokeVCWithAuthorizationCallIssuerProofStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class SuspendVCCall extends ethereum.Call {
  get inputs(): SuspendVCCall__Inputs {
    return new SuspendVCCall__Inputs(this);
  }

  get outputs(): SuspendVCCall__Outputs {
    return new SuspendVCCall__Outputs(this);
  }
}

export class SuspendVCCall__Inputs {
  _call: SuspendVCCall;

  constructor(call: SuspendVCCall) {
    this._call = call;
  }

  get vc(): SuspendVCCallVcStruct {
    return this._call.inputValues[0].value.toTuple() as SuspendVCCallVcStruct;
  }

  get reason(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SuspendVCCall__Outputs {
  _call: SuspendVCCall;

  constructor(call: SuspendVCCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SuspendVCCallVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): SuspendVCCallVcIssuerStruct {
    return this[2].toTuple() as SuspendVCCallVcIssuerStruct;
  }

  get credentialSubject(): SuspendVCCallVcCredentialSubjectStruct {
    return this[3].toTuple() as SuspendVCCallVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class SuspendVCCallVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class SuspendVCCallVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class SuspendVCWithAuthorizationCall extends ethereum.Call {
  get inputs(): SuspendVCWithAuthorizationCall__Inputs {
    return new SuspendVCWithAuthorizationCall__Inputs(this);
  }

  get outputs(): SuspendVCWithAuthorizationCall__Outputs {
    return new SuspendVCWithAuthorizationCall__Outputs(this);
  }
}

export class SuspendVCWithAuthorizationCall__Inputs {
  _call: SuspendVCWithAuthorizationCall;

  constructor(call: SuspendVCWithAuthorizationCall) {
    this._call = call;
  }

  get vc(): SuspendVCWithAuthorizationCallVcStruct {
    return this._call.inputValues[0].value.toTuple() as SuspendVCWithAuthorizationCallVcStruct;
  }

  get issuerProof(): SuspendVCWithAuthorizationCallIssuerProofStruct {
    return this._call.inputValues[1].value.toTuple() as SuspendVCWithAuthorizationCallIssuerProofStruct;
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SuspendVCWithAuthorizationCall__Outputs {
  _call: SuspendVCWithAuthorizationCall;

  constructor(call: SuspendVCWithAuthorizationCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SuspendVCWithAuthorizationCallVcStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get anchorCommit(): string {
    return this[1].toString();
  }

  get issuer(): SuspendVCWithAuthorizationCallVcIssuerStruct {
    return this[2].toTuple() as SuspendVCWithAuthorizationCallVcIssuerStruct;
  }

  get credentialSubject(): SuspendVCWithAuthorizationCallVcCredentialSubjectStruct {
    return this[3].toTuple() as SuspendVCWithAuthorizationCallVcCredentialSubjectStruct;
  }

  get claimType(): string {
    return this[4].toString();
  }

  get claimHash(): string {
    return this[5].toString();
  }

  get issuanceDate(): BigInt {
    return this[6].toBigInt();
  }

  get expirationDate(): BigInt {
    return this[7].toBigInt();
  }

  get trust(): i32 {
    return this[8].toI32();
  }

  get stake(): BigInt {
    return this[9].toBigInt();
  }

  get actionByte(): i32 {
    return this[10].toI32();
  }
}

export class SuspendVCWithAuthorizationCallVcIssuerStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class SuspendVCWithAuthorizationCallVcCredentialSubjectStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get ethereumAddress(): Address {
    return this[1].toAddress();
  }
}

export class SuspendVCWithAuthorizationCallIssuerProofStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferWithAuthorizationCall extends ethereum.Call {
  get inputs(): TransferWithAuthorizationCall__Inputs {
    return new TransferWithAuthorizationCall__Inputs(this);
  }

  get outputs(): TransferWithAuthorizationCall__Outputs {
    return new TransferWithAuthorizationCall__Outputs(this);
  }
}

export class TransferWithAuthorizationCall__Inputs {
  _call: TransferWithAuthorizationCall;

  constructor(call: TransferWithAuthorizationCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get validAfter(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get validBefore(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get nonce(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class TransferWithAuthorizationCall__Outputs {
  _call: TransferWithAuthorizationCall;

  constructor(call: TransferWithAuthorizationCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateMinBalanceToIssueCall extends ethereum.Call {
  get inputs(): UpdateMinBalanceToIssueCall__Inputs {
    return new UpdateMinBalanceToIssueCall__Inputs(this);
  }

  get outputs(): UpdateMinBalanceToIssueCall__Outputs {
    return new UpdateMinBalanceToIssueCall__Outputs(this);
  }
}

export class UpdateMinBalanceToIssueCall__Inputs {
  _call: UpdateMinBalanceToIssueCall;

  constructor(call: UpdateMinBalanceToIssueCall) {
    this._call = call;
  }

  get newMinBalance(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMinBalanceToIssueCall__Outputs {
  _call: UpdateMinBalanceToIssueCall;

  constructor(call: UpdateMinBalanceToIssueCall) {
    this._call = call;
  }
}

export class UpdateMinBalanceToReceiveCall extends ethereum.Call {
  get inputs(): UpdateMinBalanceToReceiveCall__Inputs {
    return new UpdateMinBalanceToReceiveCall__Inputs(this);
  }

  get outputs(): UpdateMinBalanceToReceiveCall__Outputs {
    return new UpdateMinBalanceToReceiveCall__Outputs(this);
  }
}

export class UpdateMinBalanceToReceiveCall__Inputs {
  _call: UpdateMinBalanceToReceiveCall;

  constructor(call: UpdateMinBalanceToReceiveCall) {
    this._call = call;
  }

  get newMinBalance(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMinBalanceToReceiveCall__Outputs {
  _call: UpdateMinBalanceToReceiveCall;

  constructor(call: UpdateMinBalanceToReceiveCall) {
    this._call = call;
  }
}

export class UpdateMinBalanceToTransferCall extends ethereum.Call {
  get inputs(): UpdateMinBalanceToTransferCall__Inputs {
    return new UpdateMinBalanceToTransferCall__Inputs(this);
  }

  get outputs(): UpdateMinBalanceToTransferCall__Outputs {
    return new UpdateMinBalanceToTransferCall__Outputs(this);
  }
}

export class UpdateMinBalanceToTransferCall__Inputs {
  _call: UpdateMinBalanceToTransferCall;

  constructor(call: UpdateMinBalanceToTransferCall) {
    this._call = call;
  }

  get newMinBalance(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMinBalanceToTransferCall__Outputs {
  _call: UpdateMinBalanceToTransferCall;

  constructor(call: UpdateMinBalanceToTransferCall) {
    this._call = call;
  }
}

export class UpdateStakeToIssueCall extends ethereum.Call {
  get inputs(): UpdateStakeToIssueCall__Inputs {
    return new UpdateStakeToIssueCall__Inputs(this);
  }

  get outputs(): UpdateStakeToIssueCall__Outputs {
    return new UpdateStakeToIssueCall__Outputs(this);
  }
}

export class UpdateStakeToIssueCall__Inputs {
  _call: UpdateStakeToIssueCall;

  constructor(call: UpdateStakeToIssueCall) {
    this._call = call;
  }

  get newMinStake(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMaxStake(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStakeToIssueCall__Outputs {
  _call: UpdateStakeToIssueCall;

  constructor(call: UpdateStakeToIssueCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
